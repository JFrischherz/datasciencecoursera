hist(mtcars$am)
hist(mtcars$am)
hist(mtcars$am)
library(datasets)
data(mtcars)
hist(mtcars$am)
hist(mtcars$am, col = "wheat", main = "Histogram of auto vs non auto transmission", xlab = "transmission")
pairs(mpg~.,data=mtcars)
pairs(mpg~am,data=mtcars)
?mtcars
library(datasets)
data(mtcars)
library(bestglm)
install.packages("bestglm")
library(bestglm)
bestglm(mtcars)
bestglm(mtcars)$BestMode
bestglm(mtcars)$BestModel
$BestModel
mtcars$BestModel
bestglm(mtcars)
bestglm(mtcars)$BestModel
sapply(mtcars,function(x) cor(mpg,x))
library(datasets)
library(bestglm)
data(mtcars)
sapply(mtcars,function(x) cor(mpg,x))
attach(mtcars)
sapply(mtcars,function(x) cor(mpg,x))
sapply(mtcars,function(x) cor(mtcars$mpg,x))
fit1 <- lm(mpg ~ cyl + disp + hp + drat + wt + vs + am ,mtcars)
summary(fit1)$coef
fit4 <- lm(mpg ~ am ,mtcars)
summary(fit4)$coef
?anova
anova(fit1,fit2,fit3,fit4)
lm(mpg ~ factor(am),mtcars)
?mtcars
lm(mpg ~ am,mtcars)
library(caret)
chooseCRANmirror()
install.packages(caret)
instal.packages(caret)
install.package(caret)
install.package(caret)
instal.packages(caret)
install.packages(caret)
utils:::menuInstallPkgs()
library(caret)
library(lattice)
library(ggplot2)
instal.packages(AppliedPredictiveModelling)
utils:::menuInstallPkgs()
install.packages(AppliedPredictiveModelling)
library(AppliedPredictiveModelling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adDAta = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50, list = FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adDAta = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50, list = FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adDAta = data.frame(predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50, list = FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
testing = adDAta[-trainIndex,]
adData = data.frame(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50, list = FALSE)
training = adData[trainIndex,]
testing = adDAata[-trainIndex,]
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
head(concrete)
plot(concrete$CompressiveStrength, pch=19)
library(Hmisc)
utils:::menuInstallPkgs()
library(Hmisc)
library(Hmisc)
?cut2
set.seed(1)
x <- runif(1000, 0, 100)
z <- cut2(x, c(10,20,30))
table(z)
table(cut2(x, g=10))      # quantile groups
table(cut2(x, m=50))      # group x into intevals with at least 50 obs.
table(cut2(x, g=10))
plot(concrete$CompressiveStrength)
plot(concrete$CompressiveStrength, pch=19)
plot(concrete$CompressiveStrength)
plot(concrete$CompressiveStrength, pch=19)
head(cement)
head(concrete)
cutConcrete<- cut2(training$compressiveStrength), g=4)
cutConcrete<- cut2(training$compressiveStrength, g=4)
cutConcrete<- cut2(training$compressiveStrength, g=3)
table(cutConcrete)
cutConcrete<- cut2(training$compressiveStrength, g=3)
library(sqldf)
sqldf('SELECT DISTINCT CompressiveStrength FROM concrete')
sqldf('SELECT DISTINCT CompressiveStrength FROM training')
cutConcrete<- cut2(training$CompressiveStrength, g=3)
table(cutConcrete)
p1 <- qplot(cutConcrete, index, data = training, fil = cutConcrete, geom=c("boxplot")
)
p1 <- qplot(cutConcrete, index, data = training, fill = cutConcrete, geom=c("boxplot"))
p1
p1 <- qplot(cutConcrete, FlyAsh, data = training, fill = cutConcrete, geom=c("boxplot"))
p1
p2 <- qplot(cutConcrete, FlyAsh, data = training, fill = cutConcrete, geom=c("boxplot","jitter"))
grid.arrange(p1,p2,ncol=2)
p2
p3 <- qplot(cutConcrete, CompressiveStrength, data = training, fill = cutConcrete, geom=c("boxplot"))
p3
head(concrete)
plot(cutConcrete)
plot(concrete$CompressiveStrength, pch=19)
plot(cutConcrete, pch=19)
p4 <- plot(cutConcrete, pch=19)
p4
p1 <- qplot(cutConcrete, FlyAsh, data = training, fill = cutConcrete, geom=c("boxplot"))
p2 <- qplot(cutConcrete, FlyAsh, data = training, fill = cutConcrete, geom=c("boxplot","jitter"))
plot(concrete$CompressiveStrength, pch=19)
p1 <- qplot(cutConcrete, FlyAsh, data = training, fill = cutConcrete, geom=c("boxplot"))
p2 <- qplot(cutConcrete, FlyAsh, data = training, fill = cutConcrete, geom=c("boxplot","jitter"))
p2
cor(CompressiveStrength~FlyAsh)
head(concrete)
sqldf('SELECT DISTINCT FlyAsh FROM training')
cor(CompressiveStrength~FlyAsh,concrete)
?cor
p5 <- qplot(cutConcrete, Age, data = training, fill = cutConcrete, geom=c("boxplot","jitter"))
p5
plot(concrete$CompressiveStrength, pch=19)
plot(concrete$CompressiveStrength~concrete$flyAsh)
plot(concrete$CompressiveStrength~concrete$FlyAsh)
plot(concrete$CompressiveStrength~concrete$Age)
head(concrete)
featurePlot(x=training[c,"FlyAsh","Age")],, y =cutConcrete), plot = "pairs")
featurePlot(x=training[c,"FlyAsh","Age")], y =cutConcrete), plot = "pairs")
featurePlot(x=training[,c("FlyAsh","Age")], y =cutConcrete), plot = "pairs")
featurePlot(x=training[,c("FlyAsh","Age")], y =cutConcrete, plot = "pairs")
p x<- featurePlot(x=training[,c("FlyAsh","Age")], y =cutConcrete, plot = "pairs")a
px <- featurePlot(x=training[,c("FlyAsh","Age")], y =cutConcrete, plot = "pairs")a
p <- featurePlot(x=training[,c("FlyAsh","Age")], y =cutConcrete, plot = "pairs")a
p <- featurePlot(x=training[,c("FlyAsh","Age")], y =cutConcrete, plot = "pairs")
p
p <- featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh","Water","Age","Superplasticizer","CoarseAggregate"," FineAggregate")], y =cutConcrete, plot = "pairs")
p
p <- featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh","Water","Age","Superplasticizer","CoarseAggregate","FineAggregate")], y =cutConcrete, plot = "pairs")
p
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
head(training)
hist(training$Superplasticizer)
p1 <- hist(training$Superplasticizer)
p1
p2 <- hist(log(training$Superplasticizer))
p2
data(AlzheimerDisease)
adDAta = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adDAta$diagnosis, p =3/4[[1]]
training = adData[inTrain,]
testing = adData[-iTrain,]
inTrain = createDataPartition(adDAta$diagnosis, p =3/4)[[1]]
training = adData[inTrain,]
testing = adData[-iTrain,]
inTrain = createDataPartition(adDAta$diagnosis, p =3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
predName <- name(training)
(ILpredictor <- predName[substr(predName, 1,2) == "IL"])
predName <- names(training)
(ILpredictor <- predName[substr(predName, 1,2) == "IL"])
procPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .9)
procPCA$numComp
adDAta = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adDAta$diagnosis, p =3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
predName <- names(training)
(ILpredictor <- predName[substr(predName, 1,2) == "IL"])
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- [,c(ILpredictor, "diagnosis")]
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[,c(ILpredictor, "diagnosis")]
ModelAll <-train(diagnosis ~ .,data = trainingIL, method "glm")
ModelAll <-train(diagnosis ~ .,data = trainingIL, method "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL)
ModelAll <-train(diagnosis ~ .,data = trainingIL, method "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL)
)
ModelAll <-train(diagnosis ~ .,data = trainingIL, method "glm")
ModelAll <-train(diagnosis~ .,data = trainingIL, method "glm")
ModelAll <-train(diagnosis ~ .data = trainingIL, method "glm")
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[,c(ILpredictor, "diagnosis")]
ModelAll <-train(diagnosis ~ .data = trainingIL, method "glm")
ModelAll <-train(diagnosis ~ .data = trainingIL , method "glm")
ModelAll <-train(diagnosis ~ .data = trainingIL , method = "glm")
ModelAll <-train(diagnosis ~ ,.data = trainingIL , method = "glm")
ModelAll <-train(diagnosis ~ ,.data = trainingIL, method = "glm")
ModelAll <-train(diagnosis ~ .,data = trainingIL, method = "glm")
utils:::menuInstallPkgs()
library(e1071)
ModelAll <-train(diagnosis ~ .,data = trainingIL, method = "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
preProc <- preProcess(training[,ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
preProc <- preProcess(training[,ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
preProc <- preProcess(training[,ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC )
library(e1071)
adDAta = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adDAta$diagnosis, p =3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
predName <- names(training)
(ILpredictor <- predName[substr(predName, 1,2) == "IL"])
# The model using all the predictors (Non-PCA)
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[,c(ILpredictor, "diagnosis")]
ModelAll <-train(diagnosis ~ .,data = trainingIL, method = "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
set.seed(3433)data(AlzheimerDisease)
library(e1071)
adDAta = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adDAta$diagnosis, p =3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
predName <- names(training)
(ILpredictor <- predName[substr(predName, 1,2) == "IL"])
# The model using all the predictors (Non-PCA)
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[,c(ILpredictor, "diagnosis")]
ModelAll <-train(diagnosis ~ .,data = trainingIL, method = "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
testPC <- predict(preProc, testing[,ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
preProc <- preProcess(training[,ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
trainPC <- predict(preProc, training[,ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
preProc <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
preProc <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
head(trainPC)
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
preProc <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,ILpredictor])
confusionMatrix(testingIL$diagnosis, predict(ModelPCA, testPC))
ModelPCA <- train(diagnosis ~ ., method = "glm", data = trainPC)
ModelPCA <- train(diagnosis ~ .,data = trainPC, method = "glm")
ModelPCA <- train(diagnosis ~ .,data = trainPC , method = "glm")
predName <- names(training)
(ILpredictor <- predName[substr(predName, 1,2) == "IL"])
ModelPCA <- train(diagnosis ~ .,data = trainPC , method = "glm")
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
q()
summary(cars)
getwd()
read.csv("~/datasciencecoursera/practicalMachineLearning/pml-training.csv")
train <- read.csv("~/datasciencecoursera/practicalMachineLearning/pml-training.csv")
test <-read.csv("~/datasciencecoursera/practicalMachineLearning/pml-testing.csv")
test
dim(test)
dim(train)
library(caret)
library(rattle)
library(repmis)
library(randomForest)
library(rpart)
library(rpart.plot)
install.packages("repmis")
library(repmis)
library(repmis)
library(sqldf)
library(gsubfn)
library(proto)
library(sqldf)
dim(train)
dim(test)
head(train)
head(test)
head(test)
train <- train[, colSums(is.na(training)) == 0]
test <- test[, colSums(is.na(testing)) ==0]
dim(train)
dim(test)
head(test)
train <- train[, colSums(is.na(training)) == 0]
test <- test[, colSums(is.na(testing)) ==0]
head(train)
names(train)
dim(train)
dim(test)
train <- train[, -c(1:7)]
test <- test[,-c(1:7)]
dim(train)
dim(test)
train <- train[, -colSums(is.na(training)) == 0]
test <- test[, -colSums(is.na(testing)) ==0]
dim(train)
dim(test)
train <- read.csv("~/datasciencecoursera/practicalMachineLearning/pml-training.csv")
test <-read.csv("~/datasciencecoursera/practicalMachineLearning/pml-testing.csv")
dim(train)
dim(test)
sqldf("SELECT TOP 100 * FROM train")
library(tcltk)
sqldf("SELECT TOP 100 * FROM train")
head(train)
sqldf("SELECT classe FROM train")
library(sqldf)
sqldf("SELECT classe FROM train")
data_na <- sapply(train, function(x) {sum(is.na(x))})
table(data_na)
train <- read.csv("~/datasciencecoursera/practicalMachineLearning/pml-training.csv")
test <-read.csv("~/datasciencecoursera/practicalMachineLearning/pml-testing.csv")
data_na <- sapply(train, function(x) {sum(is.na(x))})
table(data_na)
train <- read.csv("~/datasciencecoursera/practicalMachineLearning/pml-training.csv")
test <-read.csv("~/datasciencecoursera/practicalMachineLearning/pml-testing.csv")
dim(train)
dim(test)
data_na <- sapply(train, function(x) {sum(is.na(x))})
table(data_na)
summary(data$classe)
summary(train$classe)
ex_col <- names(data_na[data_na== 19216]
train <- train[, !names(train) %in% ex_col]
ex_col <- names(data_na[data_na== 19216])
train <- train[, !names(train) %in% ex_col]
dim(train)
train <- train[, -c(1:7)]
test <- test[,-c(1:7)]
dim(train)
library(ggplot2)
library(lattice)
library(gsubfn)
library(proto)
library(caret)
library(rattle)
library(repmis)
library(randomForest)
library(rpart)
library(rpart.plot)
library(tcltk)
library(sqldf)
train <- read.csv("~/datasciencecoursera/practicalMachineLearning/pml-training.csv")
test <-read.csv("~/datasciencecoursera/practicalMachineLearning/pml-testing.csv")
data_na <- sapply(train, function(x) {sum(is.na(x))})
table(data_na)
ex_col <- names(data_na[data_na== 19216])
train <- train[, !names(train) %in% ex_col]
train <- train[, -c(1:7)]
test <- test[,-c(1:7)]
dim(train)
dim(test)
head(train)
mod_rf <- train(classe~., data = train, method = "rf")
mod_gbm <- train(diagnosis~., method = "gbm", data=train )
mod_gbm <- train(classe~., method = "gbm", data=train )
mod_lda <- train(classe~., data=train , method = "lda")
install.packages("leaflet")
library(leaflet)
m = leaflet() %>% addTiles() %>% addMarkers(lat=39.298113, lng=-76.590248, popup= "Where Brian works"
)
m = leaflet() %>%
addTiles() %>%
addMarkers(lat=39.298113, lng=-76.590248, popup= "Where Brian work)
m = leaflet() %>%
addTiles() %>%
addMarkers(lat=39.298113, lng=-76.590248, popup= "Where Brian works")
m
source('~/.active-rstudio-document')
m = leaflet() %>%
addTiles() %>%
addMarkers(lat=47.0349, lng=-76.590248, popup= "Where Brian works")
m
m = leaflet() %>%
addTiles() %>%
addMarkers(lat=47.0349, lng=-8.5806, popup= "Where Brian works")
m
addMarkers(lat=47.0349, lng=8.5806, popup= "Where Brian works")
m = leaflet() %>%
addTiles() %>%
addMarkers(lat=47.0349, lng=8.5806, popup= "Where Brian works")
m
m = leaflet()
m =  addTiles(m) %>%
m =  addMarkers(m,lat=47.0349, lng=8.5806, popup= "Where I grew up")
m
m = leaflet()
m =  addTiles(m)
m =  addMarkers(m,lat=47.0349, lng=8.5806, popup= "Where I grew up")
m
m = leaflet()
m =  addTiles(m)
m =  addMarkers(m,lat=47.0349, lng=8.5806, popup= "Where I grew up")
m
rpubsUpload(title, htmlFile, id = NULL, properties = list(),
method = getOption("rpubs.upload.method", "auto"))
library(devtools)
require(devtools)
library("devtools")
getwd()
install.packages("devtools")
library(devtools)
install_github("ropensci/plotly")
library(plotly)
install.packages("plotly")
install.packages("plotly")
library(plotly)
library(ggplot2)
install.packages("ggplot2")
library(plotly)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("assertthat")
library(ggplot2)
library(plotly)
install_github('slidfy,'ramnathv'')
install_github('slidfy,'ramnathv')
install_github('slidfy','ramnathv')
library(devtools)
install_github('slidfy','ramnathv')
install_github('slidifyLibraries','ramnathv')
setwd("~\datasciencecoursera")
getwd()
setwd("~\datasciencecoursera\Ddp2)
setwd("~\datasciencecoursera\Ddp2")
setwd("~\datasciencecoursera\Ddp2\")
setwd("~/datasciencecoursera/Ddp2/")
getwd()
author("Presentation")
library(slidifyLibraries)
library(slidfy)
install_github('slidfy','ramnathv')
install_github('slidify','ramnathv')
library(slidify)
author("Presentation")
require(devtools)
install_github("ropensci/plotly")
install.packages("viridis")
library(viridis)
sys.setenv("plotly_username"="your_plotly_username")
library(devtools)
sys.setenv("plotly_username"="jfrischherz")
Sys.setenv("plotly_username"="jfrischherz")
Sys.setenv("plotly_api_key"="hYb47zezeSX0kCdT2ZGp")
plot_ly(mtcars, x = hp, y = mpg,
mode = "markers",
colour = wt,
text = paste("Weight:" , wt))
library(mtcars)
install.packages("mtcars")
library(mtcars)
plot_ly(mtcars, x = hp, y = mpg,
mode = "markers",
colour = wt,
text = paste("Weight:" , wt))
names(mtcars)
plot_ly(mtcars, x = hp, y = mpg,
mode = "markers",
colour = wt,
text = paste("Weight:" , wt))
plotly:::verify("username")
plotly:::verify("api_key")
plot_ly(mtcars, x=hp, y=mpg, mode = "markers", color = wt, text=paste("Weight:", wt))
library(ggplot2)
g = ggplot(mtcars, aes(x=wt, y=mpg))
g = g + geom_point(aes(color=factor(cyl)))
ggplotly(g)
library(plotly)
Sys.setenv("plotly_username"="jfrischherz")
Sys.setenv("plotly_api_key"="hYb47zezeSX0kCdT2ZGp")
library(ggplot2)
g = ggplot(mtcars, aes(x=wt, y=mpg))
g = g + geom_point(aes(color=factor(cyl)))
ggplotly(g)
